<?php

namespace Fwk\Di;

/**
 * Test class for ClassDefinition.
 * Generated by PHPUnit on 2013-06-27 at 22:50:32.
 */
class ClassDefinitionTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ClassDefinition
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ClassDefinition('\stdClass');
        
    }
    
    protected function getContainer()
    {
        $container = new Container();
        $container['className'] = '\stdClass';
        $container->set('temp.dir', function($c) { return sys_get_temp_dir(); });
        
        return $container;
    }
    
    /**
     */
    public function testStdClassInvocation()
    {
        $this->assertEquals('\stdClass', $this->object->getClassName());
        $this->assertInstanceOf('\stdClass', $this->object->invoke($this->getContainer()));
    }
    
    /**
     */
    public function testStdClassReferenceInvocation()
    {
        $this->object->setClassName($ref = new Reference('className'));
        $this->assertInstanceOf('\Fwk\Di\Reference', $this->object->getClassName());
        $this->object = new ClassDefinition($ref);
        $this->assertInstanceOf('\stdClass', $this->object->invoke($this->getContainer()));
    }
    
    /**
     */
    public function testToBeLoadedClassInvocation()
    {
        $this->object->setClassName('Fwk\Xml\Map');
        $this->assertInstanceOf('\Fwk\Xml\Map', $this->object->invoke($this->getContainer()));
    }
    
    /**
     */
    public function testStdClassInvalidReferenceInvocation()
    {
        $this->object = new ClassDefinition(new Reference('inexistant_ref'));
        $this->setExpectedException('Fwk\Di\Exceptions\InvalidClassDefinition');
        $this->object->invoke($this->getContainer());
    }
    
    public function testInvalidArgumentInvocation()
    {
        $this->object = new ClassDefinition(new \stdClass());
        $this->setExpectedException('Fwk\Di\Exceptions\InvalidClassDefinition');
        $this->object->invoke($this->getContainer());
    }
    
    /**
     */
    public function testClassNotFound() {
        $this->object = new ClassDefinition('InexistantClassDi');
        $this->setExpectedException('Fwk\Di\Exceptions\ClassNotFound');
        $this->object->invoke($this->getContainer());
    }
    
    /**
     */
    public function testInvoke() {
        $this->object = new ClassDefinition('DirectoryIterator');
        $this->object->addArgument(sys_get_temp_dir());
        $it = $this->object->invoke($this->getContainer());
        $this->assertInstanceOf('DirectoryIterator', $it);
    }
    
    /**
     */
    public function testInvokeWithErroneousArguments() {
        $this->object = new ClassDefinition('DirectoryIterator');
        $this->object->addArgument(new Reference('invalid_ref'));
        $this->setExpectedException('\Fwk\Di\Exceptions\InvalidClassDefinition');
        $it = $this->object->invoke($this->getContainer());
    }
    
    /**
     */
    public function testInvokeWithReferences() {
        $this->object = new ClassDefinition('DirectoryIterator');
        $this->object->addArgument(new Reference('temp.dir'));
        $container = $this->getContainer();
        $it = $this->object->invoke($container);
        $this->assertInstanceOf('DirectoryIterator', $it);
        $this->assertEquals($it->getRealPath(), $container->get('temp.dir'));
    }
    
    public function testInvokeWithReferencesShortcuts() {
        $this->object = new ClassDefinition('DirectoryIterator');
        $this->object->addArgument('@temp.dir');
        $container = $this->getContainer();
        $it = $this->object->invoke($container);
        $this->assertInstanceOf('DirectoryIterator', $it);
        $this->assertEquals($it->getRealPath(), $container->get('temp.dir'));
    }
    
    public function testInvokeWithMethodCalls() {
        $this->object = new ClassDefinition('Fwk\Di\Reference');
        $this->object->addArgument('testRef');
        $this->object->addMethodCall('setName', array('changedName'));
        $inst = $this->object->invoke($this->getContainer());
        $this->assertInstanceOf('\Fwk\Di\Reference', $inst);
        $this->assertEquals("changedName", (string)$inst);
    }
    
    public function testInvokeWithRemovedMethodCalls() {
        $this->testInvokeWithMethodCalls();
        $this->object->removeMethodClass('setName');
        $inst = $this->object->invoke($this->getContainer());
        $this->assertInstanceOf('\Fwk\Di\Reference', $inst);
        $this->assertEquals("testRef", $inst);
    }
    
    public function testInvokeWithInvalidMethodCallsArguments() {
        $this->object = new ClassDefinition('Fwk\Di\Reference');
        $this->object->addArgument('testRef');
        $this->object->addMethodCall('setName', array('@invalid_ref'));
        
        $this->setExpectedException('\Fwk\Di\Exceptions\InvalidClassDefinition');
        $this->object->invoke($this->getContainer());
    }
}